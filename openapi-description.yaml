openapi: 3.1.0
info:
  title: restful-api-jwt
  version: 1.0.0
  description: RESTful API with JWT authentication
  contact:
    name: Cristian Herrera
    email: cristianmherrera21@gmail.com
    url: https://github.com/cris6h16

servers:
  - url: https://localhost:3001
    description: Prod Server
  - url: http://localhost:8080
    description: Dev Server

paths:
  /api/v1/auth/login:
    post:
      tags:
        - Unauthenticated Endpoints
      summary: Log in with email and password
      description: Authenticates a user using their email and password. Returns access and refresh tokens.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password

      responses:
        200:
          description: OK - User was successfully authenticated
          content:
            application/json:
              schema:
                schema:
                  type: object
                  name: LoginResponseDTO
                  properties:
                    accessToken:
                      type: string
                    refreshToken:
                      type: string
                  required:
                    - accessToken
                    - refreshToken

        400:
          $ref: '#/components/responses/InvalidPropertyProvided'

        401:
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageSchema'
              examples:
                InvalidCredentials:
                  summary: Invalid credentials
                  description: When is user was not found or user isn't active
                  value:
                    message: "Invalid credentials"
                    status: "401"

        422:
          description: Unprocessable Entity - User's email isn't verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageSchema'
              examples:
                EmailNotVerified:
                  summary: Email not verified
                  description: When a user has his email unverified
                  value:
                    message: "Email not verified, please check your email"
                    status: "422"

        default:
          $ref: '#/components/responses/GenericFail'

  /api/v1/auth/signup:
    post:
      summary: Create a user
      description: Create a user account.
      tags:
        - Unauthenticated Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - username
                - email
                - password
      responses:
        201:
          description: Created - A user was successfully created
          headers:
            location:
              description: Location header
              schema:
                type: string

        400:
          $ref: '#/components/responses/InvalidPropertyProvided'

        409:
          $ref: '#/components/responses/Conflict'

        default:
          $ref: '#/components/responses/GenericFail'


  /api/v1/auth/verify-email:
    put:
      summary: Verify Email
      description: Verify a user email after a successful account creation
      tags:
        - User Endpoints
      security:
        - accessToken: [ ]
      responses:
        204:
          description: No content - email was verified successfully
        403:
          description: Forbidden - When the user is unauthenticated
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/GenericFail'

  /api/v1/auth/request-reset-password:
    post:
      summary: Request Reset Password
      description: request reset password of an user account providing the email
      tags:
        - User Endpoints

      security:
        - accessToken: [ ]

      requestBody:
        $ref: '#/components/requestBodies/EmailTextPlain'

      responses:
        202:
          description: the request was successfully accepted and an email was sent to complete the process
        400:
          $ref: '#/components/responses/InvalidPropertyProvided'
        default:
          $ref: '#/components/responses/GenericFail'

  /api/v1/auth/password:
    patch:
      summary: reset password of an account
      description: set a new password for an account
      tags:
        - User Endpoints
      security:
        - accessToken: [ ]
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              format: password
              minLength: 8

      responses:
        204:
          description: No Content - the new password was set
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/GenericFail'

  /api/v1/auth/refresh-token:
    post:
      summary: refresh access
      description: request a new access token
      tags:
        - User Endpoints

      security:
        - refreshToken: [ ]

      responses:
        200:
          description: a new access token was generated successfully.
          content:
            application/json:
            schema:
              type: object
              properties:
              accessToken:
                type: string
              required:
                - accessToken

        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/GenericFail'

  /api/v1/user/account/request/delete:
    post:
      summary: Request delete my account
      description: request delete my account; send the delete account confirmation to my email
      tags:
        - User Endpoints
      security:
        - accessToken: [ ]
      responses:
        202:
          description: the request was successfully accepted and an email was sent to complete the process
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/GenericFail'

  /api/v1/user/account:
    get:
      summary: Get my public account
      tags:
        - User Endpoints
      security:
        - accessToken: [ ]
      responses:
        200:
          description: response containing my public account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserAccountSchema'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/GenericFail'

    delete:
      summary: delete my account
      description: deactivate my account
      tags:
        - User Endpoints
      security:
        - accessToken: [ ]
      responses:
        204:
          description: the account was successfully deactivated
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/GenericFail'

  /api/v1/user/all:
    get:
      summary: Get all the public accounts
      security:
        - accessToken: [ ]
      tags:
        - Admin Endpoints
      parameters:
        - name: size
          in: query
          allowEmptyValue: false
          required: false
          description: the size of the page
          schema:
            type: integer
        - name: sort
          in: query
          allowEmptyValue: false
          required: false
          description: The properties to sort each one with its direction (asc, desc)
          schema:
            type:
        - name: page
          in: query
          allowEmptyValue: false
          required: false
          description: the page number ( Zero-Index )
          schema:
            type: integer

      responses:
        200:
          description: a page of public accounts
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/PublicUserAccountSchema'
                  pageable:
                    type: object
                    properties:
                      pageNumber:
                        type: integer
                      pageSize:
                        type: long
                      sort:
                        type: object
                        properties:
                          empty:
                            type: boolean
                          sorted:
                            type: boolean
                          unsorted:
                            type: boolean
                      offset:
                        type: integer
                      paged:
                        type: boolean
                      unpaged:
                        type: boolean
                  last:
                    type: boolean
                  totalElements:
                    type: long
                  totalPages:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
                  sort:
                    type: object
                    properties:
                      empty:
                        type: boolean
                      sorted:
                        type: boolean
                      unsorted:
                        type: boolean
                  numberOfElements:
                    type: integer
                  first:
                    type: boolean
                  empty:
                    type: boolean
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/GenericFail'




  /api/v1/user/account/update/username:
    patch:
      summary: update my username
      tags:
        - User Endpoints
      security:
        - accessToken: [ ]
      requestBody:
        $ref: '#/components/requestBodies/UsernameTextPlain'

      responses:
        204:
          description: the username was successfully updated
        400:
          $ref: '#/components/responses/InvalidPropertyProvided'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/GenericFail'


  /api/v1/user/account/update/password:
    patch:
      summary: Update my password
      tags:
        - User Endpoints
      security:
        - accessToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  format: password
                currentPassword:
                  type: string
                  format: password
                required:
                  - newPassword
                  - currentPassword
      responses:
        204:
          description: Password updated successfully
        400:
          $ref: '#/components/responses/InvalidPropertyProvided'
        401:
          description: The current password doesn't match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageSchema'
              examples:
                InvalidCredentials:
                  summary: Current password is not matching
                  description: When the current password doesn't match with you real password
                  value:
                    message: "Your current password not matches"
                    status: "401"
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/GenericFail'

  /api/v1/user/account/request/update-email:
    post:
      summary: Request update my email
      description: request update my email to my email
      tags:
        - User Endpoints
      security:
        - accessToken: [ ]
      responses:
        202:
          description: The request was successful accepted and the email for complete the process was sent
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/GenericFail'

  /api/v1/user/account/update/email:
    patch:
      summary: Update my email
      description: update my email sending a new email for replace my old email
      tags:
        - User Endpoints
      security:
        - accessToken: [ ]
      requestBody:
        $ref: '#/components/requestBodies/EmailTextPlain'
      responses:
        204:
          description: the email was successfully updated
        400:
          $ref: '#/components/responses/InvalidPropertyProvided'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

        409:
          $ref: '#/components/responses/Conflict'

        default:
          $ref: '#/components/responses/GenericFail'





components:
  schemas:
    PublicUserAccountSchema:
      type: object
      properties:
        id:
          type: string
          format: number
        username:
          type: string
        email:
          type: string
          format: email
        roles:
          type: set
        active:
          type: boolean
        emailVerified:
          type: boolean
        lastModified:
          type: string

        required:
          - id
          - username
          - email
          - roles
          - active
          - emailVerified
          - lastModified

    ErrorMessageSchema:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
      required:
        - message
        - status

  responses:

    Conflict:
      description: Conflict - Username or email already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageSchema'
          examples:
            UsernameAlreadyExists:
              summary: Username already exists
              description: When the provided username is already in use.
              value:
                message: "Username already exists"
                status: "409"
            EmailAlreadyExists:
              summary: Email already exists
              description: When the provided email is already in use.
              value:
                message: "Email already exists"
                status: "409"

    InvalidPropertyProvided:
      description: Bad Request - Invalid property provided like a invalid email, password too short, username length invalid, etc.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageSchema'
          examples:
            EmailInvalid:
              summary: Invalid email provided
              description: When is null or not match with the email regex
              value:
                message: "Invalid email"
                status: "400"
            PasswordInvalid:
              summary: Invalid password provided
              description: When is null or the length is less than 8
              value:
                message: "Password must be at least 8 characters long"
                status: "400"
            UsernameInvalid:
              summary: Invalid username provided
              description: When length of the username provided is invalid
              value:
                message: "Username length must be between 3 & 20 ( included )"
                status: "400"


    GenericFail:
      description: Internal Server Error - Unhandled error has occurred internally
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageSchema'
          examples:
            UnexpectedError:
              summary: Unhandled error occurred
              description: When is has occurred an unexpected error like database failure, etc.
              value:
                message: "Unexpected error, please try again later"
                status: "500"




    NotFound:
      description: Not Found - When the user is not found

    Forbidden:
      description: Forbidden - When the user is unauthenticated or has no permission to access the resource

  requestBodies:

    EmailTextPlain:
      required: true
      content:
        text/plain:
          schema:
            type: string
            format: email

    UsernameTextPlain:
      required: true
      content:
        text/plain:
          schema:
            type: string
            minLength: 3
            maxLength: 20

  securitySchemes:

    refreshToken:
      type: http
      name: refreshToken
      scheme: bearer
      bearerFormat: JWT
      description: Refresh token in Authorization Header

    accessToken:
      type: http
      name: accessToken
      scheme: bearer
      bearerFormat: JWT
      description: Access token in Authorization Header

